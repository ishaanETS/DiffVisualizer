Class {
	#name : #Commit,
	#superclass : #Object,
	#instVars : [
		'diffs',
		'mseMooseModel',
		'theclass'
	],
	#category : #DiffVisualizer
}

{ #category : #'instance creation' }
Commit >> classModified: diff [

	^ mseMooseModel allModelClasses detect: [ :c | 
		  c sourceAnchor fileName endsWith: diff filename ] ifNone: [ nil ] .
]

{ #category : #accessing }
Commit >> diffs [

	^ diffs
]

{ #category : #accessing }
Commit >> diffs: anObject [

	diffs := anObject
]

{ #category : #'instance creation' }
Commit >> fromCSV: filename [

	diffs := filename asFileReference readStreamDo: [ :readStream | 
		         (NeoCSVReader on: readStream)
			         skipHeader;
			         recordClass: GitDiff;
			         addField: #filename:;
			         addField: #plus_indexes:;
			         addField: #minus_indexes:;
			         upToEnd ].
		
	^self
]

{ #category : #'instance creation' }
Commit >> fromJson: filename [

	|temp_dictionary |
	temp_dictionary := filename asFileReference readStreamDo: [ :readStream | 
		         (NeoJSONReader on: readStream) next ].
	
	temp_dictionary first.
	^ self
]

{ #category : #'as yet unclassified' }
Commit >> hierarchyPlot [

	| classes canvas shapes |
    classes := mseMooseModel  allModelClasses select: [ :cls | 
                   cls mooseName beginsWith:
                       'headfirst::designpatterns::combining::composite' ].

    canvas := RSCanvas new.
    shapes := classes collect: [ :cls | 
                  | methods |
                  methods := cls methods collect: [ :met | 
                                 RSBox new
                                     model: met;
                                     width: 20;
                                     height: met numberOfLinesOfCode;
                                     color: Color blue translucent;
                                     popup;
                                     when: RSMouseClick
                                     do: [ :evt | evt shape inspect ];
                                     yourself ].
                  RSGridLayout on: methods.
                  RSComposite new
                      model: cls;
                      shapes: methods;
                      padding: 10;
                      color: Color gray translucent;
                      draggable;
                      popup;
                      yourself ].
    RSLineBuilder orthoVertical
        withVerticalAttachPoint;
        canvas: canvas;
        shapes: shapes;
        connectFrom: #superclass.
    canvas addAll: shapes.
    RSTreeLayout on: shapes.
    canvas @ RSCanvasController.
    ^ canvas
]

{ #category : #'instance creation' }
Commit >> loadMSE: filepath rootfolder: rootfolderpath [

	| mseFileRef mseStream mooseModel |
	mseFileRef := filepath asFileReference. "Generated by FamixMaker"
	mseStream := mseFileRef readStream.
	mseStream
		ifNotNil: [ 
			mooseModel := MooseModel importFromMSEStream: mseStream.
			mooseModel rootFolder: rootfolderpath.
			mseStream close ]
		ifNil: [ 
			self error:
				'Could not load MSE file into Moose: ' , mseFileRef asString ].
	mseMooseModel := mooseModel.
	^ self
]

{ #category : #'instance creation' }
Commit >> methodsModified: diff [

	theclass := mseMooseModel allModelClasses detect: [ :c | 
		            c sourceAnchor fileName endsWith: diff filename ].

	^ theclass methods detect: [ :m | 
		  33
			  between: m sourceAnchor startLine
			  and: m sourceAnchor endLine ]
]

{ #category : #accessing }
Commit >> mseMooseModel [

	^ mseMooseModel
]

{ #category : #accessing }
Commit >> mseMooseModel: anObject [

	mseMooseModel := anObject
]

{ #category : #accessing }
Commit >> theclass [

	^ theclass
]

{ #category : #accessing }
Commit >> theclass: anObject [

	^ theclass := anObject
]

{ #category : #'as yet unclassified' }
Commit >> treelayout [

	| c shapes eb label testClasses |
	c := RSCanvas new.
	label := RSLabeled new highlightable.
	testClasses := mseMooseModel allModelClasses select: [ :cls | 
		               cls mooseName beginsWith:
			               'headfirst::designpatterns::strategy::AnimalTest' ].
	shapes := testClasses collect: [ :cls | 
		          RSComposite new
			          model: cls;
			          @ label;
			          draggable;
			          size: 5;
			          yourself ].

	c addAll: shapes.
	RSNormalizer color
		from: (Color gray alpha: 0.5);
		to: (Color red alpha: 0.5);
		shapes: shapes;
		normalize: #numberOfMethods.
	RSNormalizer size
		shapes: shapes;
		normalize: #numberOfMethods.
	eb := RSLineBuilder line.
	eb canvas: c.
	eb connectFrom: #superclass.
	RSTreeLayout on: shapes.
	shapes do: [ :e | e translateBy: 0 @ 0 ].
	c @ RSCanvasController.
	^ c
]
